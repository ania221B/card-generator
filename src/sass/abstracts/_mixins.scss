@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'breakpoints' as *;
@use 'themes' as *;

@mixin mq($size) {
  @if (map.has-key($breakpoints, $size)) {
    $breakpoint: map.get($breakpoints, $size);
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  } @else if (meta.type-of($size) == number) {
    @if (math.is-unitless($size)) {
      @error 'Provided value of #{$size} has no unit';
    } @else {
      $breakpoint: $size;
      @media screen and (min-width: $breakpoint) {
        @content;
      }
    }
  } @else {
    @error 'Provided value of #{$size} is not in the $breakponts map. Use a value from $breakpoints map or a number with a unit';
  }
}

@mixin get-theme() {
  @each $theme, $map in $card-themes {
    &.#{$theme} {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map.get(map.get($card-themes, $theme), '#{$key}');
        $theme-map: map.merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@mixin get-nested-theme() {
  @each $theme, $map in $card-themes {
    .#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map.get(map.get($card-themes, $theme), '#{$key}');
        $theme-map: map.merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@mixin apply-background() {
  @each $color, $theme in $themes {
    $i: 1;
    @each $featured-clr, $clr-value in $theme {
      .bg-#{$color} {
        span:nth-child(#{$i}) {
          background-color: $clr-value;
        }
      }
      $i: $i + 1;
    }
  }
}
